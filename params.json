{"name":"Easy PACS","tagline":"Easiest way to store dicom files. A new open-source dicom listener PACS Server build with DCM4CHE tools","body":"### Welcome to EasyPACS.\r\nEasy PACS allows you to setup a PACS Server which you can view your dicom images online. It uses DCM4CHE tools with the latest frameworks such as Spring Boot. No need to setup a server anymore, the jar file is the file you only need and it contains the web-server itself. Thanks to Spring Boot, it enables the jar file to become both a listener (server) and web at the same time. \r\n\r\nThe server accepts all the dicom files and produces all the required database entities. Dicom entity structure is known as:\r\n> Patient --> NxStudy --> MxSeries --> ZxInstances \r\n1 Patient can contain N of Studies, \r\n1 Study can contain M of Series\r\n1 Series can contain Z of Instances\r\n    \r\n### How to Setup Java Environment\r\nJava platform is tricky. It uses 32 bit Java environment along with needed clib_ files to enable the image file conversions\r\n1- Put 32 bit  clib_jiio.dll, clib_jiio_sse2.dll, clib_jiio_util.dll files under C:\\Program Files (x86)\\Java\\jre1.8.0_20\\bin\r\n2 - Put clibwrapper_jiio.jar, jai_imageio.jar files under  C:\\Program Files (x86)\\Java\\jdk1.8.0_45\\jre\\lib\\ext\\\r\n\r\n### Environmental Variables:\r\nMake sure that you Environmental Variables are setup correctly\r\n> User Defined:\r\n> Variable Name:  JAVA_HOME\r\n> Variable Value: C:\\Program Files (x86)\\Java\\jdk1.8.0_20\r\n\r\n> System variables\r\n> Variable Name:  CLASSPATH\r\n> Variable Value: %JAVA_HOME%\\jre\\bin:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}