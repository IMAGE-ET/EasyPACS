{"name":"Easy PACS","tagline":"Easiest way to store dicom files. A new open-source dicom listener PACS Server build with DCM4CHE tools","body":"### Welcome to EasyPACS.\r\nEasy PACS allows you to setup a PACS Server which you can view your dicom images online. It uses DCM4CHE tools with the latest frameworks such as Spring Boot and Gradle Build Environment. No need to setup a server anymore, the jar file is the file you only need and it contains the web-server itself. Thanks to Spring Boot, it enables the jar file to become both a listener (server) and web at the same time. \r\n\r\n### Download\r\nDownload [easy-pacs-0-0-1-snapshot.jar](https://s3-us-west-2.amazonaws.com/easypacs/easy.pacs-0.0.1-SNAPSHOT.jar)\r\nYou can run your jar file with any 32 bit support wrapper. Your EasyPACS server will listen the ports 104, 1111, 2222, 3333 for your incoming dicom files. You can enter your dicom server via **http://localhost:8085/**  \r\n\r\n### Object Model\r\nThe server accepts all the dicom files and produces all the required database entities. The dicom entities are generated with JPA related entities such as _**Patient, Study, Series, Equipment and Instance**_.  \r\n\r\n### Database is MYSQL\r\nPlease run the below sql queries to generate your tables\r\n```\r\nCREATE TABLE tbl_patient (pkTBLPatientID BIGINT AUTO_INCREMENT NOT NULL, createdDate DATETIME, modifiedDate DATETIME, patientAge VARCHAR(5), patientBirthday DATE, patientID VARCHAR(50), patientName VARCHAR(50), patientSex VARCHAR(2), PRIMARY KEY (pkTBLPatientID))\r\nCREATE TABLE tbl_study (pkTBLStudyID BIGINT AUTO_INCREMENT NOT NULL, accessionNumber VARCHAR(20), additionalPatientHistory VARCHAR(100), admittingDiagnosesDescription VARCHAR(50), createdDate DATETIME, modifiedDate DATETIME, referringPhysicianName VARCHAR(50), studyDateTime DATETIME, studyDescription VARCHAR(200), studyID VARCHAR(50), studyInstanceUID VARCHAR(100), studyPriorityID VARCHAR(20), studyStatusID VARCHAR(20), pkTBLPatientID BIGINT, PRIMARY KEY (pkTBLStudyID))\r\nCREATE TABLE tbl_series (pkTBLSeriesID BIGINT AUTO_INCREMENT NOT NULL, bodyPartExamined VARCHAR(20), createdDate DATETIME, laterality VARCHAR(50), modifiedDate DATETIME, operatorsName VARCHAR(30), patientPosition VARCHAR(10), protocolName VARCHAR(50), seriesDateTime DATETIME, seriesDescription VARCHAR(100), seriesInstanceUID VARCHAR(100), seriesNumber INTEGER, pkTBLStudyID BIGINT, PRIMARY KEY (pkTBLSeriesID))\r\nCREATE TABLE tbl_equipment (pkTBLEquipmentID BIGINT AUTO_INCREMENT NOT NULL, conversionType VARCHAR(30), createdDate DATETIME, deviceSerialNumber VARCHAR(50), institutionAddress VARCHAR(50), institutionName VARCHAR(50), institutionalDepartmentName VARCHAR(50), manufacturer VARCHAR(50), manufacturerModelName VARCHAR(50), modality VARCHAR(30), modifiedDate DATETIME, softwareVersion VARCHAR(50), stationName VARCHAR(30), pkTBLSeriesID BIGINT, PRIMARY KEY (pkTBLEquipmentID))\r\nCREATE TABLE tbl_instance (pkTBLInstanceID BIGINT AUTO_INCREMENT NOT NULL, acquisitionDateTime DATETIME, contentDateTime DATETIME, createdDate DATETIME, exposureTime INTEGER, imageOrientation VARCHAR(20), imagePosition VARCHAR(50), imageType VARCHAR(20), instanceNumber INTEGER, kvp VARCHAR(20), mediaStorageSopInstanceUID VARCHAR(100), modifiedDate DATETIME, patientOrientation VARCHAR(20), pixelSpacing FLOAT, sliceLocation FLOAT, sliceThickness FLOAT, sopClassUID VARCHAR(100), sopInstanceUID VARCHAR(100), transferSyntaxUID VARCHAR(100), windowCenter VARCHAR(20), windowWidth VARCHAR(20), xrayTubeCurrent INTEGER, pkTBLSeriesID BIGINT, PRIMARY KEY (pkTBLInstanceID))\r\nALTER TABLE tbl_study ADD CONSTRAINT FK_tbl_study_pkTBLPatientID FOREIGN KEY (pkTBLPatientID) REFERENCES tbl_patient (pkTBLPatientID)\r\nALTER TABLE tbl_series ADD CONSTRAINT FK_tbl_series_pkTBLStudyID FOREIGN KEY (pkTBLStudyID) REFERENCES tbl_study (pkTBLStudyID)\r\nALTER TABLE tbl_equipment ADD CONSTRAINT FK_tbl_equipment_pkTBLSeriesID FOREIGN KEY (pkTBLSeriesID) REFERENCES tbl_series (pkTBLSeriesID)\r\nALTER TABLE tbl_instance ADD CONSTRAINT FK_tbl_instance_pkTBLSeriesID FOREIGN KEY (pkTBLSeriesID) REFERENCES tbl_series (pkTBLSeriesID)\r\n```\r\n\r\n### Easy PACS Dicom Logic\r\nDicom entity structure is known as:\r\n```\r\nPatient --> NxStudy --> MxSeries --> ZxInstances \r\nSeries --> Equipment\r\n1 Patient can contain N of Studies, \r\n1 Study can contain M of Series\r\n1 Series can contain Z of Instances\r\n1 Series can contain 1 Equipment\r\n```\r\n\r\n### Entity Diagram\r\n![Easy PACS Entity Diagram](https://2kere2beseder.files.wordpress.com/2015/04/easypacsorm_final.jpg)\r\n    \r\n### How to Setup Java Environment\r\nJava platform is tricky. It uses 32 bit Java environment along with needed _**clib_**_ files to enable the image file conversions\r\n\r\n1. Put 32 bit  [clib_jiio.dll, clib_jiio_sse2.dll, clib_jiio_util.dll](https://2kere2beseder.files.wordpress.com/2015/04/clib_files.zip) dll files under C:\\Program Files (x86)\\Java\\jre1.8.0_20\\bin\r\n2. Put [clibwrapper_jiio.jar, jai_imageio.jar](https://2kere2beseder.files.wordpress.com/2015/04/clib_files.zip) jar files under  C:\\Program Files (x86)\\Java\\jdk1.8.0_45\\jre\\lib\\ext\\\r\n\r\n\r\n### Environmental Variables:\r\nMake sure that your Environmental Variables are setup correctly\r\n```\r\nUser Defined\r\nVariable Name:  JAVA_HOME\r\nVariable Value: C:\\Program Files (x86)\\Java\\jdk1.8.0_20\r\n```\r\n\r\n```\r\nSystem variables\r\nVariable Name:  CLASSPATH\r\nVariable Value: %JAVA_HOME%\\jre\\bin:\r\n```\r\n\r\n## Easy PACS as a Windows Service\r\nWe use Tanuki Windows Wrapper to run Easy PACS as a server. Please follow these steps carefully\r\n1. Download  and unzip it under C: drive  i.e: _**C:\\EasyPACSService**_\r\n   * You will see the following EasyPACS Service Folder Structure \r\n![EasyPACS Service Folder Structure](https://2kere2beseder.files.wordpress.com/2015/04/monitor1.jpg)\r\n   * Go to conf/wrapper.conf and update your java path\r\n![Wrapper Java Path](https://2kere2beseder.files.wordpress.com/2015/04/wrapper_java_command.jpg)\r\n   * Again in conf/wrapper.conf update your jar names along with version number. Here is an example of the wrapper.conf file\r\n\r\n`#********************************************************************`\r\n`# Wrapper License Properties (Ignored by Community Edition)`\r\n`#********************************************************************`\r\n`# Include file problems can be debugged by removing the first '#'`\r\n`#  from the following line:`\r\n`##include.debug`\r\n`#include ../conf/wrapper-license.conf`\r\n`#include ../conf/wrapper-license-%WRAPPER_HOST_NAME%.conf`\r\n\r\n`#********************************************************************`\r\n`# Wrapper Java Properties`\r\n`#********************************************************************`\r\n`# Java Application`\r\n`wrapper.java.command=C:\\Program Files (x86)\\Java\\jdk1.8.0_45/bin/java`\r\n\r\n`# Java Main class.  This class must implement the WrapperListener interface`\r\n`#  or guarantee that the WrapperManager class is initialized.  Helper`\r\n`#  classes are provided to do this for you.  See the Integration section`\r\n`#  of the documentation for details.`\r\n`wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperJarApp`\r\n\r\n`# Java Classpath (include wrapper.jar)  Add class path elements as`\r\n`#  needed starting from 1`\r\n`wrapper.java.classpath.1=../lib/wrapper.jar`\r\n`wrapper.java.classpath.2=easy.pacs-0.0.1-SNAPSHOT.jar`\r\n\r\n`# Java Library Path (location of Wrapper.DLL or libwrapper.so)`\r\n`wrapper.java.library.path.1=../lib`\r\n\r\n`# Java Additional Parameters`\r\n`#wrapper.java.additional.1=-Dprogram.name=run.bat`\r\n\r\n`# Initial Java Heap Size (in MB)`\r\n`#wrapper.java.initmemory=1024`\r\n\r\n`# Maximum Java Heap Size (in MB)`\r\n`#wrapper.java.maxmemory=2048`\r\n\r\n`# Application parameters.  Add parameters as needed starting from 1`\r\n`wrapper.app.parameter.1=easy.pacs-0.0.1-SNAPSHOT.jar`\r\n\r\n`#********************************************************************`\r\n`# Wrapper Logging Properties`\r\n`#********************************************************************`\r\n`# Format of output for the console.  (See docs for formats)`\r\n`wrapper.console.format=PM`\r\n\r\n`# Log Level for console output.  (See docs for log levels)`\r\n`wrapper.console.loglevel=INFO`\r\n\r\n`# Log file to use for wrapper output logging.`\r\n`wrapper.logfile=../logs/wrapper.log`\r\n\r\n`# Format of output for the log file.  (See docs for formats)`\r\n`wrapper.logfile.format=LPTM`\r\n\r\n`# Log Level for log file output.  (See docs for log levels)`\r\n`wrapper.logfile.loglevel=INFO`\r\n\r\n`# Maximum size that the log file will be allowed to grow to before`\r\n`#  the log is rolled. Size is specified in bytes.  The default value`\r\n`#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or`\r\n`#  'm' (mb) suffix.  For example: 10m = 10 megabytes.`\r\n`wrapper.logfile.maxsize=10m`\r\n\r\n`# Maximum number of rolled log files which will be allowed before old`\r\n`#  files are deleted.  The default value of 0 implies no limit.`\r\n`wrapper.logfile.maxfiles=50`\r\n\r\n`# Log Level for sys/event log output.  (See docs for log levels)`\r\n`wrapper.syslog.loglevel=ERROR`\r\n\r\n`#********************************************************************`\r\n`# Wrapper Windows Properties`\r\n`#********************************************************************`\r\n`# Title to use when running as a console`\r\n`wrapper.console.title=EasyPACS_001`\r\n\r\n`#********************************************************************`\r\n`# Wrapper Windows NT/2000/XP Service Properties`\r\n`#********************************************************************`\r\n`# WARNING - Do not modify any of these properties when an application`\r\n`#  using this configuration file has been installed as a service.`\r\n`#  Please uninstall the service before modifying this section.  The`\r\n`#  service can then be reinstalled.`\r\n\r\n`# Name of the service`\r\n`wrapper.ntservice.name=EasyPACS_001`\r\n\r\n`# Display name of the service`\r\n`wrapper.ntservice.displayname=EasyPACS_001`\r\n\r\n`# Description of the service`\r\n`wrapper.ntservice.description=EasyPACS_001`\r\n\r\n`# Service dependencies.  Add dependencies as needed starting from 1`\r\n`wrapper.ntservice.dependency.1=`\r\n\r\n`# Mode in which the service is installed.  AUTO_START or DEMAND_START`\r\n`wrapper.ntservice.starttype=AUTO_START`\r\n\r\n`# Allow the service to interact with the desktop.`\r\n`wrapper.ntservice.interactive=false`\r\n\r\n\r\n \r\n2. [Download easy-pacs-0-0-1-snapshot.jar](https://2kere2beseder.files.wordpress.com/2015/04/easy-pacs-0-0-1-snapshot.zip)\r\n3. Setup your JAVA Environment as explained above\r\n4. Generate your tables as explained above\r\n4. ","google":"UA-26578001-1","note":"Don't delete this file! It's used internally to help with page regeneration."}